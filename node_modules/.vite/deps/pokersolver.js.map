{
  "version": 3,
  "sources": ["../../pokersolver/pokersolver.js"],
  "sourcesContent": ["/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n\n(function() {\n  'use strict';\n\n  // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n  /**\n   * Base Card class that defines a single card.\n   */\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    }\n\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true;\n\n      // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      }\n\n      // Ensure no duplicate cards in standard game.\n      if (game.descr === 'standard' && new Set(cards).size !== cards.length) {\n        throw new Error('Duplicate cards');\n      }\n      \n      // Get rank based on game.\n      var handRank = this.game.handValues.length;\n      for (var i=0; i<this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n      this.rank = handRank - i;\n\n      // Set up the pool of cards.\n      this.cardPool = cards.map(function(c) {\n        return (typeof c === 'string') ? new Card(c) : c;\n      });\n\n      // Fix the card ranks for wild cards, and sort.\n      for (var i=0; i<this.cardPool.length; i++) {\n        card = this.cardPool[i];\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n      this.cardPool = this.cardPool.sort(Card.sort);\n\n      // Create the arrays of suits and values.\n      var obj, obj1, key, key1, card;\n      for (var i=0; i<this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i];\n\n        // We do something special if this is a wild card.\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []);\n\n          // Add the value to the array for that type in the object.\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n      for (var i=0; i<=4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n    loseTo(hand) {\n      return (this.compare(hand) > 0);\n    }\n\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = (cards) ? cards.length : 0;\n\n      for (var i=0; i<this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i=0; i<this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j=0;\n          while (j<values.length && j<cards.length) {\n            if (cards[j].rank === values.length-1-j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n          wild.rank = values.length-1-j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n    resetWildCards() {\n      for (var i=0; i<this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n\n      picks = this.cardPool.filter(function(card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      });\n\n      // Account for remaining wild card when it must be ace.\n      if (this.game.wildStatus === 0) {\n        for (var i=0; i<picks.length; i++) {\n          var card = picks[i];\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n    toString() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards.join(', ');\n    }\n\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n    toArray() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards;\n    }\n\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return (this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0);\n    }\n\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n    static winners(hands) {\n      hands = hands.filter(function(h) {\n        return h.qualifiesHigh();\n      });\n\n      var highestRank = Math.max.apply(Math, hands.map(function(h) {\n        return h.rank;\n      }));\n\n      hands = hands.filter(function(h) {\n        return h.rank === highestRank;\n      });\n\n      hands = hands.filter(function(h) {\n        var lose = false;\n        for (var i=0; i<hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n\n      return hands;\n    }\n\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = (typeof game === 'string') ? new Game(game) : game;\n      cards = cards || [''];\n\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i=0; i<hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i=0; i<cards.length; i++) {\n        card = cards[i];\n        if (card.rank === -1) {\n          wilds.push(cards[i]);  \n        } else {\n          nonWilds.push(cards[i]);  \n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        } \n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n        var straight = new Straight(possibleStraight, this.game);\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<5; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i=0; i<this.values.length; i++) {\n          var cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards();\n\n      // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n        if (this.cards.length) {\n          var wildCount = 0;\n          for (var i=0; i<this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n          this.cards = this.cards.sort(Card.sort);\n          for (; wildCount<this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n          return true;\n        }\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps();\n\n      // Now add the wild cards, if any, and set the appropriate ranks\n      for (var i=0; i<this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < (values.length - 1)) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j=1; j<this.cards.length; j++) {\n            if (this.cards[j-1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j-1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n        this.cards = this.cards.sort(Card.sort);\n      }\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength-1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n      for (; i>0; i--) {\n        cardsList = [];\n        gapCount = 0;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          prevCard = cardsList[cardsList.length - 1];\n          diff = (prevCard) ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < (gapCount + diff + cardsList.length)) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += (diff - 1);\n          }\n        }\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      wheelCards = [];\n      wildCount = 0;\n      for (i = this.game.sfQualify-1; i>=0; i--) {\n        cardFound = false;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          if (card.rank < i) {\n            break;\n          }\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n          for (var j=0; j<this.wilds.length && this.cards.length<2; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i=0; i<this.cards.length; i++) {\n        var card = this.cards[i];\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n\n      return true;\n    }\n  }\n\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [\n        new StraightFlush(cards, new Game('paigowpokersf7')),\n        new StraightFlush(cards, new Game('paigowpokersf6')),\n        new StraightFlush(cards, this.game),\n        new Flush(cards, new Game('paigowpokersf7')),\n        new Flush(cards, new Game('paigowpokersf6')),\n        new Flush(cards, this.game),\n        new Straight(cards, new Game('paigowpokersf7')),\n        new Straight(cards, new Game('paigowpokersf6')),\n        new Straight(cards, this.game)\n      ];\n\n      for (var i=0; i<handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || (bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank)) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        }\n        // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]);\n\n      // In Pai Gow Poker, Banker takes any equal valued hands.\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        }\n        // Player wins hi, Banker wins lo; push\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      }\n\n      // Banker wins both; banker wins\n      return -1;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n      fullHand = fullHand.concat(hiHand.cardPool);\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n      fullHand = fullHand.concat(loHand.cardPool);\n\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n\n      return result;\n    }\n\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n\n      return result;\n    }\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null;\n\n      // Set values based on the game rules.\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  }\n\n  // Export the classes for node.js use.\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  }\n\n  // Add the classes to the window for browser use.\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n\n})();\n"],
  "mappings": "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",
  "names": ["card"]
}
